{\rtf1\ansi\ansicpg1252\cocoartf1343\cocoasubrtf140
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh14500\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 make change\
\
\
hard\
\
\
make change with least amount of coins\
\
\
\
Make a function that takes the amount of money n and a vector of possible coins.\
\
You can assume there is always a coin unit of 1.\
\
I suggest you make a helper function that recursively creates all possible coin combinations.\
\
\
\
n = 14\
coins = [10, 7, 1]\
\
\
\
[7, 7]\
\
\
\
n = 6 \
coins = [10, 7, 1]\
\
\
[1, 1, 1, 1, 1, 1]\
\
\
\
def make_change(n, coins)\
  #insert your code here\
end\
\
def make_change_work(n, coins, change)\
  #insert your code here\
  #you can delete this helper method if you prefer\
end \
\
\
\
\
\
\
each , > , < , + , [] , * , - , == , size \
\
\
\
\
def make_change(n, coins)\
  @best = [1] * n\
\
  make_change_work(n, coins, [])\
\
  @best\
end\
\
\
def make_change_work(n, coins, change)\
  if n == 0\
    if change.size < @best.size\
      @best = change\
    end\
    return\
  end\
  coins.each do |coin|\
    next if coin > n\
    make_change_work(n - coin, coins, change + [coin])\
  end\
\
  nil\
end}